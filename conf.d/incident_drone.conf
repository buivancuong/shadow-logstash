input {
    file {
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/var/log/logstash/completed.log"
        file_sort_by => "path"
        mode => "read"
        path => "/var/log/uploaded/*Drone*.csv"
        sincedb_clean_after => 0.125
        sincedb_path => "/dev/null"
    }
}
filter {
    ### Drone
    grok { match => { "path" => "^/var/log/uploaded/Drone-[0-9]" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName",
                "HostName", "type", "MaliciousType", "PayloadUrl", "agent", "DstIp", "DstPort", "DstIpAsn",
                "DstIpCountryCode2", "DstDns", "count", "proxy", "application", "pOfGenre", "pOfDetail",
                "machineName", "id", "naics", "sic", "ccNaics", "ccSic", "sector", "ccSector", "sslCipher",
                "family", "tag", "PublicSrc", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Drone-Brute-Force
    grok { match => { "path" => "^/var/log/uploaded/Drone-Brute-Force" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName", 
                "HostName", "DstIp", "DstPort", "DstIpAsn", "DstIpCountryCode2", "DstDns", "Service", "naics",
                "sic", "dstNaics", "dstSic", "sector", "dstSector", "PublicSrc", "BfStartTime", "BfEndTime",
                "Version", "BfUserName", "BfPassword", "PayloadUrl", "BfPayloadMd5", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Sinkhole-HTTP-Drone
    grok { match => { "path" => "^/var/log/uploaded/Sinkhole-HTTP-Drone" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcIpAsn", "geo", "PayloadUrl", "MaliciousType", "httpAgent", "tor",
                "SrcPort", "pOfGenre", "pOfDetail", "HostName", "DstPort", "MaliciousHostName", "httpReferer",
                "httpRefererIp", "httpRefererAsn", "httpRefererGeo", "DstIp", "DstIpAsn", "DstIpCountryCode2",
                "naics", "sic", "httpRefererNaics", "httpRefererSic", "sector", "sslCipher", "application",
                "version", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### IPv6-Sinkhole-HTTP-Drone
    grok { match => { "path" => "^/var/log/uploaded/IPv6-Sinkhole-HTTP-Drone" } }  
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcIpAsn", "geo", "SrcIpRegionName", "SrcPort", "DstIp", "DstIpAsn",
                "DstIpCountryCode2", "DstPort", "Protocol", "MaliciousType", "HostName", "sysdesc", "sysname",
                "PayloadUrl", "httpAgent", "httpHost", "httpReferer", "httpRefererIp", "httpRefererAsn",
                "httpRefererGeo", "httpRefererRegion", "forwardedBy", "sslCipher", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### General
    if "LogTime" == "timestamp" { drop {} }
    grok { match => { "path" => "/var/log/uploaded/%{GREEDYDATA:FileName}" } }
    ruby { code => "event.to_hash.each { |k, v| event.set(k, '-') if v == nil }" }
    if [SrcIp] == "-" { mutate { replace => { "SrcIp" => "0.0.0.0" } } }
    if [DstIp] == "-" { mutate { replace => { "DstIp" => "0.0.0.0" } } }
    prune { whitelist_names => ["@timestamp","@version","message","tags","^[A-Z]"] }
}
output {
    elasticsearch {
        hosts => ["localhost:9200"]
        manage_template => false        
        index => "incident_drone"	
        template => "/etc/logstash/template.d/incident_drone.json"
        http_compression => true
        user => "logstash_user"
        password => "Logst4sh@123"
    }
}
