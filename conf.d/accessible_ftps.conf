input {
    file {
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/var/log/logstash/completed.log"
        file_sort_by => "path"
        mode => "read"
        path => "/var/log/uploaded/Accessible-FTP-Service*.csv"
        sincedb_clean_after => 0.125
        sincedb_path => "/dev/null"
    }
}
filter {
    if [message] =~ /^[,]+\r$/ { drop {} }
    csv {
        skip_empty_rows => true
        columns => [
            "LogTime", "SrcIP", "Protocol", "SrcPort", "HostName", "Tag", "SrcIP_ASN",
            "geo", "SrcIP_RegionName", "SrcIP_CityName", "naics", "sic", "Banner",
            "HandShake", "CipherSuite", "CertLength", "SubjectCommonName",
            "IssuerCommonName", "CertIssueDate", "CertExpirationDate", "SHA1FingerPrint",
            "CertSerialNumber", "SSLVersion", "SignatureAlgorithm", "KeyAlgorithm",
            "SubjectOrganizationName", "subjectOrganizationUnitName", "SubjectCountry",
            "subjectStateOrProvinceName", "subjectLocalityName", "subjectStreetAddress",
            "subjectPostalCode", "subjectSurname", "subjectGivenName",
            "SubjectEmaillAddress", "subjectBusinessCategory", "subjectSerialNumber",
            "IssueOrganizationName", "issuerOrganizationUnitName", "IssuerCountry",
            "issuerStateOrProvinceName", "issuerLocalityName", "issuerStreetAddress",
            "issuerPostalCode", "issuerSurname", "issuerGivenName", "IssuerEmailAddress",
            "issuerBusinessCategory", "issuerSerialNumber", "SHA256FingerPrint",
            "SHA512FingerPrint", "MD5FingerPrint", "CertValid", "SelfSigned",
            "CertExpired", "ValidationLevel", "AuthTLSResponse", "TLSv13Support", 
            "TLSv13Cipher", "Orgs"
        ]
    }
    if "LogTime" == "timestamp" { drop {} }
    grok { match => { "path" => "/var/log/uploaded/%{GREEDYDATA:FileName}" } }
    ruby { code => "event.to_hash.each { |k, v| event.set(k, '-') if v == nil }" }
    if [SrcIP] == "-" { mutate { replace => { "SrcIP" => "0.0.0.0" } } }
    mutate { split => { "Orgs" => "," } }
    prune { whitelist_names => ["@timestamp","@version","message","tags","^[A-Z]"] }
}
output {
    elasticsearch {
        hosts => ["localhost:8686"]
        manage_template => false
        index => "accessible_ftps"
        template => "/etc/logstash/template.d/accessible_ftps.json"
        http_compression => true
        ssl => true
        ssl_certificate_verification => false
        user => "logstash_user"
        password => "Logst4sh@123"
    }
}
