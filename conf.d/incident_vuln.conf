input {
    file {
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/var/log/logstash/completed.log"
        file_sort_by => "path"
        mode => "read"
        path => "/var/log/uploaded/*-Vulnerab*.csv"
        sincedb_clean_after => 0.125
        sincedb_path => "/dev/null"
    }
}
filter {
    ### ISAKMP-Vulnerability-Scan
    grok { match => { "path" => "^/var/log/uploaded/ISAKMP-Vulnerability-Scan" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "initiatorSpi", "responderSpi", "nextPayload",
                "exchangeType", "flags", "messageId", "nextPayload2", "domainOfInterpretation", "protocolId",
                "spiSize", "notifyMsgType", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Vulnerable-NAT-PMP-Systems
    grok { match => { "path" => "^/var/log/uploaded/Vulnerable-NAT-PMP-Systems" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "version", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "opcode", "uptime", "DstIp",
                "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### SSL-Freak-Vulnerable-Servers
    grok { match => { "path" => "^/var/log/uploaded/SSL-Freak-Vulnerable-Servers" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "IncidentType", "Handshake", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "CipherSuite", "certLength", "SubjectName", "IssuerName",
                "certIssueDate", "certExpirationDate", "sha1FingerPrint", "certSerialNumber", 
                "SignatureAlgorithm", "KeyAlgorithm", "subjectOrgName", "subjectOrgUnitName", "DstIpCountryCode2",
                "subjectProvinceName", "subjectLocality", "subjectStreetAddr", "subjectPostalCode", "subjectSurname",
                "subjectGivenName", "subjectEmail", "subjectBusinessCategory", "subjectSerialNumber",
                "issuerOrgName", "issuerOrgUnitName", "issueCountry", "issuerProvinceName", "issuerLocality",
                "issuerStreet", "issuerPostalCode", "issuerSurname", "issuerGivenName", "issuerEmail",
                "issuerBusinessCategory", "issuerSerialNumber", "naics", "sic", "freakVuln", "SslFreakCipherSuite",
                "sector", "sha256FingerPrint", "sha512FingerPrint", "md5FingerPrint", "HttpType", "httpCode",
                "httpReason", "contentType", "httpConnection", "wwwAuth", "setCookie", "Server", "contentLength",
                "transferEncoding", "httpDate", "certValid", "selfSign", "certExpired", "browserTrust",
                "validationLevel", "browserError", "tlsv13Sp", "tlsv13Cipher", "rawCert", "rawCertChain", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### SSLv3-Poodle-Vulnerable-Servers
    grok { match => { "path" => "^/var/log/uploaded/SSLv3-Poodle-Vulnerable-Servers" } }  
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Handshake", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "CipherSuite", "sslPoodle", "certLength",
                "SubjectName", "IssuerName", "certIssueDate", "certExpirationDate", "sha1FingerPrint",
                "certSerialNumber", "SslVersion", "SignatureAlgorithm", "KeyAlgorithm", "subjectOrgName",
                "subjectOrgUnitName", "DstIpCountryCode2", "subjectProvinceName", "subjectLocality",
                "subjectStreet", "subjectPostalCode", "subjectSurname", "subjectGivenName", "subjectEmail",
                "subjectBusinessCategory", "subjectSerialNumber", "issuerOrgName", "issuerOrgUnitName",
                "issuerCountry", "issuerProvince", "issuerLocality", "issuerStreet", "issuerPostalCode",
                "issuerSurname", "issuerGivenName", "issuerEmail", "issuerBusinessCategory", "issuerSerialNum",
                "naics", "sic", "sector", "sha256FingerPrint", "sha512FingerPrint", "md5FingerPrint", "HttpType",
                "httpCode", "httpReason", "contentType", "httpConnection", "wwwAuth", "setCookie", "Server",
                "contentLength", "transferEncoding", "httpDate", "certValid", "selfSign", "certExpired",
                "browserTrusted", "validationLevel", "browserError", "tlsv13Sp", "tlsv13Cipher", "rawCert",
                "rawCertChain", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### General
    if "LogTime" == "timestamp" { drop {} }
    grok { match => { "path" => "/var/log/uploaded/%{GREEDYDATA:FileName}" } }
    ruby { code => "event.to_hash.each { |k, v| event.set(k, '-') if v == nil }" }
    if [SrcIp] == "-" { mutate { replace => { "SrcIp" => "0.0.0.0" } } }
    if [DstIp] == "-" { mutate { replace => { "DstIp" => "0.0.0.0" } } }
    prune { whitelist_names => ["@timestamp","@version","message","tags","^[A-Z]"] }
}
output {
    elasticsearch {
        hosts => ["localhost:9200"]
        manage_template => false        
        index => "incident_openserver"	
        template => "/etc/logstash/template.d/incident_openserver.json"
        http_compression => true
        user => "logstash_user"
        password => "Logst4sh@123"
    }
}
