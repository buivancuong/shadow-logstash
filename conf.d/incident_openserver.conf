input {
    file {
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/var/log/logstash/completed.log"
        file_sort_by => "path"
        mode => "read"
        path => "/var/log/uploaded/Open*.csv"
        sincedb_clean_after => 0.125
        sincedb_path => "/dev/null"
    }
}
filter {
    ### Open-DB2-Discovery-Service
    grok { match => { "path" => "^/var/log/uploaded/Open-DB2-Discovery-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "db2HostName", "serverName",
                "size", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Elasticsearch-Server
    grok { match => { "path" => "^/var/log/uploaded/Open-Elasticsearch-Server" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version",
                "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "ok", "ElasticName",
                "ElasticClusterName", "status", "buildHash", "buildTimestamp", "buildSnapShot",
                "ElasticLuceneVersion", "tagLine", "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-IPP
    grok { match => { "path" => "^/var/log/uploaded/Open-IPP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "Version", "IppCupsVersion"
                "IppPrinterUrl", "printerName", "printerInfo", "printerMoreInfo", "printerMake&Model",
                "printerFirmware", "printerFirmwareStrVer", "printerFirmwareVer", "printerOrg",
                "printerOrgUnit", "printerUuid", "printerWifiSsid", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-LDAP-Services
    grok { match => { "path" => "^/var/log/uploaded/Open-LDAP-Services" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", 
                "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName",
                "naics", "sic", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-CoAP
    grok { match => { "path" => "^/var/log/uploaded/Accessible-CoAP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "CoapResponses", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
        mutate { split => { "CoapResponses" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-CWMP
    grok { match => { "path" => "^/var/log/uploaded/Accessible-CWMP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "http", "httpCode", "httpReason",
                "contentType", "connection", "wwwAuthenticate", "setCookie", "Server", "contentLength",
                "transferEncoding", "date", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-FTP-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-FTP-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "banner", "HandShake",
                "FtpCipherSuite", "certLength", "SubjectName", "IssuerName", "certIssueDate",
                "certExpirationDate", "sha1FingerPrint", "certSerialNumber", "SslVersion",
                "SignatureAlgorithm", "KeyAlgorithm", "SubjectName","subjectOrgUnitName",
                "subjectCountry", "subjectProvinceName", "subjectLocalityName", "subjectStreetAddress",
                "subjectPostalCode", "subjectSurname", "subjectGivenName", "subjectEmaillAddress",
                "subjectBusinessCategory", "subjectSerialNumber", "IssuerName", "issuerOrgUnitName",
                "issuerCountry", "issuerProvinceName", "issuerLocalityName", "issuerStreetAddress",
                "issuerPostalCode", "issuerSurname", "issuerGivenName", "issuerEmailAddress",
                "issuerBusinessCategory", "issuerSerialNumber", "sha256FingerPrint",
                "sha512FingerPrint", "md5FingerPrint", "certValid", "selfSigned", "certExpired",
                "validationLevel", "authTLSResponse", "tlsv13Support", 
                "tlsv13Cipher", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-Hadoop-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Hadoop-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "Versions", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "serverType",
                "ClusterId", "totalDisk", "usedDisk", "freeDisk", "liveNodes",
                "nameNodeAddress", "volumeInfo", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
        mutate { split => { "Versions" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-HTTP
    grok { match => { "path" => "^/var/log/uploaded/Accessible-HTTP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "http",
                "httpCode", "httpReason", "contentType", "connection", "wwwAuthenticate",
                "setCookies", "Server", "contentLength", "transferEncoding", "httpDate",
                "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-Open-MongoDB-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Open-MongoDB-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version", 
                "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic",
                "gitVersion", "sysInfo", "SslVersion", "allocator", "jsEngine", "bits",
                "maxBSONObjectSize", "ok", "OmdbVisibleDbs", "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
        mutate { split => { "OmdbVisibleDbs" => "|" } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-Radmin
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Radmin" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", 
                "Version", "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName",
                "naics", "sic", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-RDP-Services
    grok { match => { "path" => "^/var/log/uploaded/Accessible-RDP-Services" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "IncidentType", "HandShake", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "Protocol", "certLength",
                "SubjectName", "IssuerName", "certIssueDate", "certExpirationDate",
                "sha1FingerPrint", "certSerialNumber", "SslVersion", "SignatureAlgorithm",
                "KeyAlgorithm", "sha256FingerPrint", "sha512FingerPrint", "md5FingerPrint",
                "naics", "sic", "sector", "tlsv13Support", "tlsv13Cipher",
                "RdpCve", "RdpBluekeep", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-rsync-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-rsync-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", 
                "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName",
                "naics", "sic", "RsyncModules", "motd", "password", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
        mutate { split => { "RsyncModules" => ";" } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-SMB-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-SMB-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "SrcIpAsn", "geo", "SrcIpRegionName",
                "SrcIpCityName", "naics", "sic", "SmbImplant", "arch", "key", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-Telnet-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Telnet-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "banner", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-Ubiquiti-Service-Discovery
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Ubiquiti-Service-Discovery" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "UbiquitiMac",
                "radioName", "essid", "modelShort", "modelfull", "UbiquitiFirmware", "size", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Accessible-VNC-Service
    grok { match => { "path" => "^/var/log/uploaded/Accessible-Ubiquiti-Service-Discovery" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "SrcIpAsn", "geo", "SrcIpRegionName",
                "SrcIpCityName", "naics", "sic", "VncProduct", "banner", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### General
    if "LogTime" == "timestamp" { drop {} }
    grok { match => { "path" => "/var/log/uploaded/%{GREEDYDATA:FileName}" } }
    ruby { code => "event.to_hash.each { |k, v| event.set(k, '-') if v == nil }" }
    if [SrcIp] == "-" { mutate { replace => { "SrcIp" => "0.0.0.0" } } }
    prune { whitelist_names => ["@timestamp","@version","message","tags","^[A-Z]"] }
}
output {
    elasticsearch {
        hosts => ["localhost:9200"]
        manage_template => false        
        index => "incident_openserver"	
        template => "/etc/logstash/template.d/incident_openserver.json"
        http_compression => true
        user => "logstash_user"
        password => "Logst4sh@123"
    }
}
