input {
    file {
        file_completed_action => "log_and_delete"
        file_completed_log_path => "/var/log/logstash/completed.log"
        file_sort_by => "path"
        mode => "read"
        path => "/var/log/uploaded/Open*.csv"
        sincedb_clean_after => 0.125
        sincedb_path => "/dev/null"
    }
}
filter {
    ### Open-DB2-Discovery-Service
    grok { match => { "path" => "^/var/log/uploaded/Open-DB2-Discovery-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "db2HostName", "Server",
                "size", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Elasticsearch-Server
    grok { match => { "path" => "^/var/log/uploaded/Open-Elasticsearch-Server" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version",
                "SrcIpAsn", "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "ok", "ElasticName",
                "ElasticClusterName", "status", "buildHash", "buildTimestamp", "buildSnapShot",
                "ElasticLuceneVersion", "tagLine", "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-IPP
    grok { match => { "path" => "^/var/log/uploaded/Open-IPP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "Version", "IppCupsVersion"
                "IppPrinterUrl", "printerName", "printerInfo", "printerMoreInfo", "printerMake&Model",
                "printerFirmware", "printerFirmwareStrVer", "printerFirmwareVer", "printerOrg",
                "printerOrgUnit", "printerUuid", "printerWifiSsid", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }  
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-LDAP-Services
    grok { match => { "path" => "^/var/log/uploaded/Open-LDAP" } }  
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "size", "cfgNamingContext", "currTime",
                "defaultNamingContext", "LdapDnsHostName", "domainCtrlFunc", "domainFunc", "dsServiceName",
                "forestFunc", "highestCommittedUsn", "isGlobalCatalogReady", "isSync", "LdapServiceName",
                "namingContext", "rootDomainNamingContext", "schemaNamingContext", "Server",
                "subschema_subentry", "spCapabilities", "spCtrl", "spLdapPolicies", "spLdapVersion",
                "spSaslMech", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-mDNS-Servers
    grok { match => { "path" => "^/var/log/uploaded/Open-mDNS-Servers" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "mDnsName", "mDnsIpv4", "mDnsIpv6",
                "MdnsServices", "stationName", "MdnsStationV4", "MdnsStationV6", "MdnsStationInfo", "httpName",
                "httpIpv4", "httpIpv6", "httpPtr", "httpInfo", "httpTarget", "MdnsHttpPort", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
        mutate { split => { "MdnsServices" => ";" } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Memcached-Server
    grok { match => { "path" => "^/var/log/uploaded/Open-Memcached-Server" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "pid", "ptrSize", "uptime", "time",
                "currConn", "totalConn", "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-MQTT
    grok { match => { "path" => "^/var/log/uploaded/Open-MQTT" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "anonystAccess", "rawResp", "hexContext",
                "code", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-MS-SQL-Server-Resolution-Service
    grok { match => { "path" => "^/var/log/uploaded/Open-MS-SQL-Server-Resolution-Service" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "SrcPort", "HostName", "IncidentType", "Version", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "Server", "MsSqlInstance", "MsSqlTcpPort",
                "MsSqlNamedPipe", "respLen", "amplification", "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Portmapper-Scan
    grok { match => { "path" => "^/var/log/uploaded/Accessible-HTTP" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "PortMapperPrograms", "mountdPort",
                "export", "Orgs"
            ]
        }
        mutate { split => { "PortMapperPrograms" => ";" } }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Redis-Server
    grok { match => { "path" => "^/var/log/uploaded/Open-Redis-Server" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "gitSha1", "gitDirtyFlag", "buildId",
                "mode", "Server", "architecture", "multiplexingApi", "RedisGccVersion", "processId", "runId",
                "uptime", "connectedClient", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-Resolvers
    grok { match => { "path" => "^/var/log/uploaded/Open-Resolvers" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "Version", "SrcIpAsn",
                "geo", "SrcIpRegionName", "SrcIpCityName", "minAmplif", "pOfGenre", "pOfDetail", "naics", "sic",
                "sector", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### Open-TFTP-Servers
    grok { match => { "path" => "^/var/log/uploaded/Open-TFTP-Servers" } }
    if "_grokparsefailure" not in [tags] {
        if [message] =~ /^[,]+\r$/ { drop {} }
        csv {
            skip_empty_rows => true
            columns => [
                "LogTime", "SrcIp", "Protocol", "SrcPort", "HostName", "IncidentType", "SrcIpAsn", "geo",
                "SrcIpRegionName", "SrcIpCityName", "naics", "sic", "opcode", "errCode", "error", "errMsg",
                "size", "Orgs"
            ]
        }
        mutate { split => { "Orgs" => "," } }
    }
    else {
        mutate { remove_tag => ["_grokparsefailure"] }
    }
    ### General
    if "LogTime" == "timestamp" { drop {} }
    grok { match => { "path" => "/var/log/uploaded/%{GREEDYDATA:FileName}" } }
    ruby { code => "event.to_hash.each { |k, v| event.set(k, '-') if v == nil }" }
    if [SrcIp] == "-" { mutate { replace => { "SrcIp" => "0.0.0.0" } } }
    prune { whitelist_names => ["@timestamp","@version","message","tags","^[A-Z]"] }
}
output {
    elasticsearch {
        hosts => ["localhost:9200"]
        manage_template => false        
        index => "incident_openserver"	
        template => "/etc/logstash/template.d/incident_openserver.json"
        http_compression => true
        user => "logstash_user"
        password => "Logst4sh@123"
    }
}
